hudson.scm.*
def message=""
pipeline{
    agent any
    stages{
        //
        stage('test'){
            steps{
            script{
                dir('test'){
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], browser: [$class: 'GithubWeb', repoUrl: ''], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/vbkuzhel/trackchange.git']]])
                echo "Build class is"
                echo "class is  ${currentBuild.getClass()}"
                def changes="" 
                def rb= new RepositoryBrowser()
                def link="" 
                if (currentBuild.getChangeSets().size()>0){
                    for (changelist in currentBuild.getChangeSets()){
                     for (change in changelist){
                         if (changes==""){
                             link=rb.getChangeSetLink(change).toString()
                             changes ="${change.getCommentAnnotated()}: ${change.getCommitId()} ${change.getClass()}  ${change.getRevision()} ${change.getMsgEscaped()} ${link}"
                             } 
                          else {
                              changes =changes +"\n${change.getCommentAnnotated()}: ${change.getCommitId()}  ${change.getClass()}  ${change.getRevision()} ${change.getMsgEscaped()} ${link}"
                          }
                     }   
                    }
                   echo "changes are : ${changes}"
                    //hipchatSend color: 'GREEN', credentialId: 'hipchatOneyTestPushesRoomTocken', message: "This is a test message. Please ignore it . the changelog is: ${changes}", room: '779', sendAs: 'jenkins', server: 'chat.fidor.de', v2enabled: true 
                }
                
                
                }
            }
            }
        }
    }
}